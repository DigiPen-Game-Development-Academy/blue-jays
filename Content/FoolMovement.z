//Author: Christian Yan
//Purpose: Fool Movement
class FoolMovement : ZilchComponent
{
    [Property] var PaceSpeed : Real = 5.0;
    [Property] var MaxMoveDistance : Real = 10.0;
    [Property] var PaceDirection : Real3 = Real3(1,0,0);
    
    var StartPosition: Real3 = Real3();
    
    [Dependency]
    var Transform : Transform;
    function Initialize(init : CogInitializer)
    {
        // update the fool whenever this updates
        Zero.Connect(this.Space, Events.LogicUpdate, this.PaceBackAndForth);
        // track where the fool started and how far he has moved
        this.StartPosition = this.Owner.Transform.Translation;
    }

    function PaceBackAndForth(event: UpdateEvent)
    {
          // how far he has moved from where he started
        var displacement = this.Transform.Translation - this.StartPosition;
        var distanceFromStart = Math.Length(displacement);

        // check if fool has moved past max distance
        if (distanceFromStart >= this.MaxMoveDistance)
        {
            // once he goes past max switch directions
            this.PaceDirection *= -1;
        }
        
        this.Owner.RigidBody.Velocity = this.PaceDirection * this.PaceSpeed;
    }
}