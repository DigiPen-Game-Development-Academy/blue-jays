class TurretPlace : ZilchComponent
{
    [Dependency] var Transform : Transform;
    
    [Property] var FateRate : Real = 1;
    [Property] var MaxFate : Real = 1;
    [Property] var ChariotCooldownTime : Real = 10;
    
    var TurretList : Array[Turret];
    var TurretNum : Integer = 0;
    var CurrentTurret : Turret;
    var Fate : Real;
    var ChariotCooldown : Real = 0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Space, Events.MouseScroll, this.OnScroll);
        this.TurretList = this.Space.Globals.GetTurrets();
        this.CurrentTurret = this.TurretList[0];
        this.LevelSettings.DrawIcons.Draw(this.TurretList);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsDown(Keys.F))
        {
            this.Fate = 1000000000;
        }
        this.ChariotCooldown -= event.Dt;
        if (this.Space.TimeSpace.TimeScale == 1)
        {
            if(Zero.Keyboard.KeyIsPressed(Keys.Space))
            {
                if(this.Fate >= this.CurrentTurret.Fate)
                {
                    if(this.CurrentTurret.Name == "The Chariot")
                    {
                        if(this.ChariotCooldown <= 0)
                        {
                            this.ChariotCooldown = this.ChariotCooldownTime;
                            var turret = this.Space.CreateAtPosition(this.CurrentTurret.Archetype, this.Transform.Translation);
                            turret.Transform.Translation += Real3(0,turret.BoxCollider.Size.Y / 2,0);
                            this.Fate -= this.CurrentTurret.Fate;
                        }
                    }
                    else
                    {
                        var turret = this.Space.CreateAtPosition(this.CurrentTurret.Archetype, this.Transform.Translation);
                        turret.Transform.Translation += Real3(0,turret.BoxCollider.Size.Y / 2,0);
                        if(this.CurrentTurret.Type == TurretType.KNIGHT)
                        {
                            this.Space.Globals.SavedStats.SavedStats.KnightSpawns += 1;
                        }
                        else if(this.CurrentTurret.Type == TurretType.STATIONARY)
                        {
                            this.Space.Globals.SavedStats.SavedStats.StationarySpawns += 1;
                        }
                        else if(this.CurrentTurret.Type == TurretType.UNIQUE)
                        {
                            this.Space.Globals.SavedStats.SavedStats.UniqueSpawns += 1;
                        }
                        this.Space.Globals.SavedStats.SavedStats.Spawns += 1;
                        this.Space.Globals.StoreStats();
                        this.Fate -= this.CurrentTurret.Fate;
                    }
                }
            }
        
            if(Zero.Keyboard.KeyIsPressed(Keys.One))
            {
                this.CurrentTurret = this.TurretList[0];
                this.TurretNum = 0;
            }
            if(Zero.Keyboard.KeyIsPressed(Keys.Two))
            {
                this.CurrentTurret = this.TurretList[1];
                this.TurretNum = 1;
            }
            if(Zero.Keyboard.KeyIsPressed(Keys.Three))
            {
                this.CurrentTurret = this.TurretList[2];
                this.TurretNum = 2;
            }
            if(this.Fate < this.MaxFate)
            {
                this.Fate += event.Dt * this.FateRate;
            }
        }
    }
    
    function OnScroll(event : MouseEvent)
    {
        if(event.Scroll.Y > 0)
        {
            if(this.TurretNum == 2)
            {
                this.TurretNum = 0;
            }
            else
            {
                this.TurretNum += 1;
            }
        }
        else
        {
            if(this.TurretNum == 0)
            {
                this.TurretNum = this.TurretList.Count - 1;
            }
            else
            {
                this.TurretNum -= 1;
            }
        }
        this.CurrentTurret = this.TurretList[this.TurretNum];
    }
}
