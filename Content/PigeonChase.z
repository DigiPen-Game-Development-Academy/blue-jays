//Author: Hunter Fosler
//Purpose: Movement for pigeons.

class PigeonChase : ZilchComponent
    {
    //[Property]
        // Pacing Properties and variables
    [Property]
    var PaceSpeed: Real = 5.0;
    [Property]
    var MaxMoveDistance: Real = 10.0;
    var PaceDirection: Real3 = Real3(0.0, 1.0, 0.0);
    var StartPosition: Real3 = Real3();

    [Property]
    var TargetObject: CogPath = null;
    [Property]
    var ChaseSpeed: Real = 5.0;
    var ChaseTriggerDistance: Real = 7.0;
    var DistanceFromTarget: Real = 0.0;
    var ChaseDirection: Real3 = Real3();
    var ChaseColor:Real4 = Real4(1.0, 0.0, 0.0, 1.0);
    var TargetIsWithinRange: Boolean = false;

    // Variables for smoothing state transitions
    var OriginalColor: Real4 = Real4();

    // Dependencies
    [Dependency]
    var Transform: Transform = null;
    [Dependency]
    var Sprite: Sprite = null;
        
    function Initialize(init : CogInitializer)
    {
        // We need to update the enemy's behavior every logic update
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.StartPosition = this.Owner.Transform.Translation;
        this.OriginalColor = this.Owner.Sprite.Color;
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.TargetIsWithinRange = false;
        
        // If our target exists
        if (this.TargetObject.Cog != null)
        {
            // Calculate the direction and distance of target
            this.CalculateChaseDirectionAndDistance();
            // Evaluate whether Ai should chase or pace
            this.TargetIsWithinRange = (this.DistanceFromTarget <= this.ChaseTriggerDistance);
            
            if (this.TargetIsWithinRange)
            {
                // Chase target
                this.ChaseTarget(event);
            }
            else // If target not in range
            {
                // Pace back and forth
                this.PaceBackAndForth(event);
            }
        }
        else // if there is no target, pace
        {
            // Logic for pacing back and forth
            this.PaceBackAndForth(event);
        }
    }

    function PaceBackAndForth(event: UpdateEvent)
    {
        this.Owner.Sprite.Color = this.OriginalColor;
    }
        
    function CalculateChaseDirectionAndDistance()
    {
        // Get direction toward target
        this.ChaseDirection = this.TargetObject.Cog.Transform.Translation - this.Owner.Transform.Translation;
        // Extract distance by finding magnitude
        this.DistanceFromTarget = Math.Length(this.ChaseDirection);
        // Extract direction by normalizing
        this.ChaseDirection = Math.Normalize(this.ChaseDirection);
    }
    
    function ChaseTarget(event: UpdateEvent)
    {
        // Set Chase Color
        this.Owner.Sprite.Color = this.ChaseColor;
        
        // Apply movement
        this.Owner.Transform.Translation += this.ChaseDirection * event.Dt * this.ChaseSpeed;
    }
}
