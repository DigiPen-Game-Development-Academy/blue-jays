// Author: Eli Miller
// Purpose: Takes keyboard input to control the player's movement and turret placement.

class PlayerController : ZilchComponent
{
    [Dependency] var RigidBody : RigidBody;
    
    [Property] var Speed : Real = 10;
    [Property] var Acceleration : Real = 5;
    [Property] var Deceleration : Real = 10;
    
    var Reversed : Boolean;
    
    function Initialize(init : CogInitializer)
    {
        this.GameSession.Globals.SingletonPlayer = this;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        var vel = Real2();
        if(Zero.Keyboard.KeyIsDown(Keys.D)) vel.X += 1;
        if(Zero.Keyboard.KeyIsDown(Keys.A)) vel.X -= 1;
        if(Zero.Keyboard.KeyIsDown(Keys.W)) vel.Y += 1;
        if(Zero.Keyboard.KeyIsDown(Keys.S)) vel.Y -= 1;
        
        if (vel == Real2.Zero)
        {
            this.RigidBody.Velocity = Math.Lerp(this.RigidBody.Velocity, Real3.Zero, this.Deceleration * event.Dt);
            
        }
        else
        {
            if (this.Reversed) vel = -vel;
            this.RigidBody.Velocity = Math.Lerp(this.RigidBody.Velocity, Real3(vel * this.Speed, 0), this.Acceleration * event.Dt);
            // this.Space.SoundSpace.PlayCue(SoundCue.Walk2); I still working on this!!
        }
    }
}
class PlayerAnimator : ZilchComponent
{
    var Previous : Real2;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.Previous = this.Owner.Transform.WorldTranslation.XY;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        var movement = this.Owner.Transform.WorldTranslation.XY - this.Previous;
        var moveSpeedSq = Math.LengthSq(movement);
        
        var input = Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.S) || Zero.Keyboard.KeyIsDown(Keys.D);
        var chariotExists = this.GameSession.Globals.SingletonChariot != null;
       
        
        if (chariotExists || !input || moveSpeedSq < 0.001)
        {
            if (this.Owner.Sprite.SpriteSource != SpriteSource.Swords)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.Swords;
            }
        }
        
        if (!chariotExists && input && moveSpeedSq > 0.01)
        {
            if (this.Owner.Sprite.SpriteSource != SpriteSource.KingOS_Run)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.KingOS_Run;
            }
        }
        
        this.Previous = this.Owner.Transform.WorldTranslation.XY;
    }
}
