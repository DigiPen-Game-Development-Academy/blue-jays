// Author: Eli Miller
// Purpose: Takes keyboard input to control the player's movement and turret placement.

class PlayerController : ZilchComponent
{
    [Dependency] var RigidBody : RigidBody;
    
    [Property] var Speed : Real = 1;
    [Property] var Acceleration : Real = 1;
    [Property] var JumpHeight : Real = 1;
    
    var JumpReady : Boolean = false;
    var Stunned : Boolean = false;
    var ChariotCoolDown : Boolean = false;
    var JumpTimer : Real = 0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.AnyCollision, this.EnableJump);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        var vel = 0;
        this.JumpTimer += event.Dt;
        if(Zero.Keyboard.KeyIsDown(Keys.D))
        {
            vel += 1;
            if(this.Owner.Sprite.SpriteSource != SpriteSource.KingOS_Run)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.KingOS_Run;
            }
            if(this.Owner.Transform.EulerAngles.Y == 0)
            {
                this.Owner.Transform.SetEulerAnglesXYZ(0,Math.Pi,0);
            }
        }
        if(Zero.Keyboard.KeyIsDown(Keys.A))
        {
            vel -= 1;
            if(this.Owner.Sprite.SpriteSource != SpriteSource.KingOS_Run)
            {
                this.Owner.Sprite.SpriteSource = SpriteSource.KingOS_Run;
            }
            if(this.Owner.Transform.EulerAngles.Y != 0)
            {
                this.Owner.Transform.SetEulerAnglesXYZ(0,0,0);
            }
        }
        if(!(Zero.Keyboard.KeyIsDown(Keys.A) || Zero.Keyboard.KeyIsDown(Keys.D)))
        {
            this.Owner.Sprite.SpriteSource = SpriteSource.Swords;
        }
        var target = Real3(vel * this.Speed * 1, this.RigidBody.Velocity.Y, 0);
        if(this.Stunned)
        {
            target = Real3(-target.X,target.Y,0);
        }
        this.RigidBody.Velocity = Math.Lerp(this.RigidBody.Velocity,target,this.Acceleration * event.Dt);
        if(Zero.Keyboard.KeyIsDown(Keys.Space))
        {
            if(this.JumpReady && this.JumpTimer >= 0.15)
            {
                this.JumpTimer = 0;
                this.Space.SoundSpace.PlayCue(SoundCue.Jump);
                this.RigidBody.ApplyForce(Real3(0,1,0) * this.JumpHeight);
            }
        }
        this.JumpReady = false;
        if(this.Space.TimeSpace.Paused == false)
        {
            if (Zero.Keyboard.KeyIsPressed(Keys.Escape))
            {
                this.Space.FindObjectByName("PauseOverlay").OverlayToggle.Toggle();
                //We need all the zeros!
                if(this.Space.TimeSpace.TimeScale == 1)
                {
                    this.Space.TimeSpace.TimeScale = 0.000000001;
                }
                else
                {
                    this.Space.TimeSpace.TimeScale = 1;
                }
            }
        }
    }  
    
    function EnableJump(event : AnyCollisionEvent)
    {
        if(Math.Abs(Math.Pi - Math.Abs(Math.ATan2(event.ContactNormal.X, event.ContactNormal.Y))) < Math.Pi / 4)
        {
            this.JumpReady = true;
        }
    }
}