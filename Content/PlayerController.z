// Author: Eli Miller
// Purpose: Takes keyboard input to control the player's movement and turret placement.

class PlayerController : ZilchComponent
{
    [Dependency] var RigidBody : RigidBody;
    
    [Property] var Speed : Real = 1;
    [Property] var Acceleration : Real = 1;
    [Property] var JumpHeight : Real = 1;
    
    var JumpReady : Boolean = false;
    var Stunned : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.AnyCollision, this.EnableJump);
        this.Space.TimeSpace.Paused == false;
    }
    //var TogglePause:Boolean = false;
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        var vel = 0;
        if(Zero.Keyboard.KeyIsDown(Keys.D)) vel += 1;
        if(Zero.Keyboard.KeyIsDown(Keys.A)) vel -= 1;
        var target = Real3(vel * this.Speed * 1, this.RigidBody.Velocity.Y, 0);
        if(this.Stunned)
        {
            target = Real3(-target.X,target.Y,0);
        }
        this.RigidBody.Velocity = Math.Lerp(this.RigidBody.Velocity,target,this.Acceleration * event.Dt);
        if(Zero.Keyboard.KeyIsDown(Keys.W))
        {
            if(this.JumpReady)
            {
                this.RigidBody.ApplyForce(Real3(0,1,0) * this.JumpHeight);
            }
        }
        this.JumpReady = false;
        if(this.Space.TimeSpace.Paused == false)
        {
            if (Zero.Keyboard.KeyIsPressed(Keys.P))
            {
                this.Space.TimeSpace.TimeScale = 0.001;
                
                Console.WriteLine("blah");
            }
        }
        if (Zero.Keyboard.KeyIsPressed(Keys.U))
        {   
            this.Space.TimeSpace.TimeScale = 1;
        }
    }  
    
    function EnableJump(event : AnyCollisionEvent)
    {
        if(Math.Abs(Math.ATan2(event.ContactNormal.X, event.ContactNormal.Y) + Math.Pi) < Math.Pi/4)
        {
            this.JumpReady = true;
        }
    }
}