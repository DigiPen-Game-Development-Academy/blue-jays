// Author: Eli Miller
// Purpose: Class for turrets.

class Turret
{
    var Archetype : Archetype;
    var Cost : Real;
    var Radius : Real;
    constructor (archetype : Archetype, cost : Real, radius : Real)
    {
        this.Archetype = archetype;
        this.Cost = cost;
        this.Radius = radius;
    }
}

class KnightLogic : ZilchComponent
{
    [Property] var Speed : Real = 1;
    
    var Target : Cog;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.Owner.RigidBody == null) return;
        
        if(this.Target == null)
        {
            this.Target = Globals.GetTarget(this.Owner, Team.Enemy);
            if(this.Target == null) return;
        }
        
        var vec = this.Target.Transform.Translation - this.Owner.Transform.Translation;
        this.Owner.RigidBody.Velocity = Math.Normalize(vec) * this.Speed;
    }
}
class ChariotLogic : ZilchComponent
{
    function Initialize(init : CogInitializer)
    {
        var player = this.Space.FindObjectByName("Player");
        if (player == null) return;
        this.Owner.AttachToRelative(player);
        this.Owner.Transform.Translation = Real3.Zero;
        this.GameSession.Globals.SingletonChariot = this;
    }
}
class TowerLogic : ZilchComponent
{
    [Property] var TimeBetweenShots : Real = 1;
    [Property] var ShootSpeed : Real = 1;
    [Property] var Projectile : Archetype = Archetype.Arrow;
    var TimeTillShoot : Real;
    
    function Initialize(init : CogInitializer)
    {
        this.TimeTillShoot = this.TimeBetweenShots;
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //couting down timer
        this.TimeTillShoot -= event.Dt;
        //check if we can shoot
        if (this.TimeTillShoot <= 0)
        {
            var target = Globals.GetTarget(this.Owner, Team.Enemy);
            if (target == null) return;
            
            var vel = (target.Transform.WorldTranslation - this.Owner.Transform.WorldTranslation) * this.ShootSpeed;
            
            //Create the bullet
            var arrow = this.Space.CreateAtPosition(this.Projectile, this.Owner.Transform.WorldTranslation + vel / 100);
            
            //Launch the bullet
            arrow.RigidBody.Velocity = vel;
            
            //Reset our time
            this.TimeTillShoot = this.TimeBetweenShots;
            
            this.Space.SoundSpace.PlayCue(SoundCue.TowerShoot);
        }
    }
}