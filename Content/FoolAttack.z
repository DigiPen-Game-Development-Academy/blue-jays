//Author: Eli Miller
//Purpose: The attacks for the fool.

class FoolAttack : ZilchComponent
{
    [Property] var BombSpeed : Real = 10;
    [Property] var BasicCooldown : Real = 1.5;
    [Property] var SpecialCooldown : Real = 10;
    [Property] var StunCooldown : Real = 16;
    [Property] var StunDuration : Real = 2;
    [Property] var EyeTelegraphTime : Real = 1.2;
    [Property] var EyeReverseTelegraphTime : Real = 1.2;
    
    var Eye : Cog;
    var BasicAttackCounter : Real = 0;
    var SpecialAttackCounter : Real = 0;
    var StunCounter : Real = 0;
    var StunReverseCounter : Real = 0;
    var SpecialAttackLocations : Array[Real3] = Array[Real3]();
    
    function Initialize(init : CogInitializer)
    {
        this.Eye = this.Space.FindObjectByName("Eye");
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        this.SpecialAttackLocations.Add(Real3(-12,5.25,0));
        this.SpecialAttackLocations.Add(Real3(12,5.25,0));
        this.SpecialAttackLocations.Add(Real3(-4.5,3.25,0));
        this.SpecialAttackLocations.Add(Real3(4.5,3.25,0));
        this.SpecialAttackLocations.Add(Real3(0,-1.25,0));
        this.SpecialAttackLocations.Add(Real3(-8,-5.25,0));
        this.SpecialAttackLocations.Add(Real3(8,-5.25,0));
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        this.BasicAttackCounter += event.Dt;
        this.SpecialAttackCounter += event.Dt;
        this.StunCounter += event.Dt;
        this.StunReverseCounter += event.Dt;
        if(this.BasicAttackCounter >= this.BasicCooldown)
        {
            this.Shoot();
            this.BasicAttackCounter = 0;
        }
        if(this.SpecialAttackCounter >= this.SpecialCooldown)
        {
            this.SpecialAttack();
            this.SpecialAttackCounter = 0;
        }
        if(this.StunCounter >= this.StunCooldown)
        {
            this.Space.FindObjectByName("Player").PlayerController.Stunned = true;
            this.StunCounter = 0;
            this.StunReverseCounter = 0;
            this.Eye.Sprite.SpriteSource = SpriteSource.EyeContinue;
        }
        else if(this.StunCounter >= this.StunCooldown - this.EyeTelegraphTime &&
            !this.Eye.Sprite.Visible)
        {
            this.Eye.Sprite.Visible = true;
            this.Eye.Sprite.SpriteSource = SpriteSource.EyeStart;
        }
        if(this.StunReverseCounter >= this.StunDuration + this.EyeReverseTelegraphTime &&
            this.Eye.Sprite.Visible)
        {
            this.Eye.Sprite.Visible = false;
            this.StunReverseCounter = -1000;
        }
        else if(this.StunReverseCounter >= this.StunDuration &&
            this.Space.FindObjectByName("Player").PlayerController.Stunned)
        {
            this.Space.FindObjectByName("Player").PlayerController.Stunned = false;
            this.Eye.Sprite.SpriteSource = SpriteSource.EyeEnd;
        }
        var emit = (this.SpecialAttackCounter/this.SpecialCooldown) * (this.SpecialAttackCounter/this.SpecialCooldown) * 1000;
        if(this.Owner.FindChildByName("Sparks").ParticleRemove.Enabled)
        {
            this.Owner.FindChildByName("Sparks").SphericalParticleEmitter.EmitRate = emit;
        }
    }
    
    function Shoot()
    {
        var bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation);
        var vec = this.Space.FindObjectByName("Player").Transform.Translation - this.Owner.Transform.Translation;
        vec = Math.Normalize(vec);
        bomb.RigidBody.Velocity = vec * this.BombSpeed;
    }

    function SpecialAttack()
    {
        foreach(var pos in this.SpecialAttackLocations)
        {
            this.Space.CreateAtPosition(Archetype.Explosion, pos);
        }
    }
}