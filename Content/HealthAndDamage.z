enum Team
{
    Player,
    Enemy,
}
enum HealthType
{
    PlayerMinion,
    EnemyMinion,
    Player,
    Boss,
}

class DamageOnCollide : ZilchComponent
{
    [Property] var TeamToHurt : Team;
    [Property] var DamageToDeal : Real = 1;
    [Property] var DeactivateSelf : Boolean;
    [Property] var AttachSelf : Boolean;
    [Property] var DestroySelf : Boolean;
    [Property] var DestroyDelay : Real;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        if (event.OtherObject.Health == null) return;
        if (event.OtherObject.Health.Team == this.TeamToHurt)
        {
            event.OtherObject.Health.DealDamage(this.DamageToDeal);
            
            if (this.DeactivateSelf)
            {
                this.TryToRemoveComponent(typeid(DamageOnCollide));
            }
            
            if (this.AttachSelf)
            {
                this.Owner.AttachToRelative(event.OtherObject);
                this.TryToRemoveComponent(typeid(RigidBody));
                this.TryToRemoveComponent(typeid(BoxCollider));
                this.TryToRemoveComponent(typeid(SphereCollider));
            }
            
            if (this.DestroySelf)
            {
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Delay(seq, this.DestroyDelay);
                Action.Call(seq, this.Owner.Destroy);
            }
        }
    }
    
    function TryToRemoveComponent(boundType : BoundType)
    {
        if (this.Owner.GetComponentByName(boundType.Name) != null)
            this.Owner.RemoveComponentByName(boundType.Name);
    }
}

class Health : ZilchComponent
{
    [Property] var HealthType : HealthType = HealthType.PlayerMinion;
    var Team : Team {
        get {
            if (this.HealthType == HealthType.Player || this.HealthType == HealthType.PlayerMinion)
                return Team.Player; else
            return Team.Enemy;
        }
    }
    
    [Property] var Health : Real = 10;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.HealthType == HealthType.Player)
        {
            this.Health = this.GameSession.Globals.PlayerCurrentHealth;
        }
        else if (this.HealthType == HealthType.Boss)
        {
            this.Health = this.GameSession.Globals.BossCurrentHealth;
        }
        
        if (this.Health <= 0) this.Die();
    }
    
    function DealDamage(amount : Real)
    {
        this.Health -= amount;
        
        if (this.HealthType == HealthType.Player)
        {
            this.GameSession.Globals.PlayerCurrentHealth = this.Health;
        }
        else if (this.HealthType == HealthType.Boss)
        {
            this.GameSession.Globals.BossCurrentHealth = this.Health;
        }
    }
    
    var Dead : Boolean;
    function Die()
    {
        if (this.Dead) return;
        this.Dead = true;
        
        if (this.HealthType == HealthType.Player)
        {
            // @missing Death effect and lose result
            this.GameSession.Globals.GameSpace.LoadLevel(Level.Hub);
        }
        else if (this.HealthType == HealthType.Boss)
        {
            // @missing Death effect and win result
            this.GameSession.Globals.GameSpace.LoadLevel(Level.Hub);
        }
        else
        {
            // @missing Death effect
            this.Owner.Destroy();
        }
    }
}
