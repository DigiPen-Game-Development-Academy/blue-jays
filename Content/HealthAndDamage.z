enum Team
{
    Player,
    Enemy,
}
enum HealthType
{
    PlayerMinion,
    EnemyMinion,
    Player,
    Boss,
}

class DoOnCollide : ZilchComponent
{
    [Property] var TeamToAffect : Team;
    [Property] var HealthToChange : Real = 0;
    [Property] var FateToChange : Real = 0;
    
    [Property] var DeactivateSelf : Boolean;
    [Property] var AttachSelf : Boolean;
    [Property] var DestroySelf : Boolean;
    [Property] var DestroyDelay : Real;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        if (event.OtherObject.Health != null && event.OtherObject.Health.Team == this.TeamToAffect)
        {
            event.OtherObject.Health.ChangeHealth(this.HealthToChange);
            
            if (this.AttachSelf)
            {
                this.Owner.AttachToRelative(event.OtherObject);
                this.TryToRemoveComponent(typeid(AutoRotate));
                this.TryToRemoveComponent(typeid(RigidBody));
                this.TryToRemoveComponent(typeid(BoxCollider));
                this.TryToRemoveComponent(typeid(SphereCollider));
            }
            
            if (this.DestroySelf)
            {
                var seq = Action.Sequence(this.Owner.Actions);
                Action.Delay(seq, this.DestroyDelay);
                Action.Call(seq, this.Owner.Destroy);
            }
            
            if (this.DeactivateSelf)
            {
                this.TryToRemoveComponent(typeid(DoOnCollide));
            }
        }
    }
    
    function TryToRemoveComponent(boundType : BoundType)
    {
        if (this.Owner.GetComponentByName(boundType.Name) != null)
            this.Owner.RemoveComponentByName(boundType.Name);
    }
}

class Health : ZilchComponent
{
    sends Damaged : ZilchEvent;
    sends Healed : ZilchEvent;
    
    [Property] var HealthType : HealthType = HealthType.PlayerMinion;
    var Team : Team {
        get {
            if (this.HealthType == HealthType.Player || this.HealthType == HealthType.PlayerMinion)
                return Team.Player; else
            return Team.Enemy;
        }
    }
    
    [Property] var Health : Real = 10;
    [Property] var Debug : Boolean;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        if (this.HealthType == HealthType.Player)
        {
            this.GameSession.Globals.PlayerCurrentHealth = this.Health;
        }
        else if (this.HealthType == HealthType.Boss)
        {
            this.GameSession.Globals.BossCurrentHealth = this.Health;
        }
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if (this.HealthType == HealthType.Player)
        {
            this.Health = this.GameSession.Globals.PlayerCurrentHealth;
        }
        else if (this.HealthType == HealthType.Boss)
        {
            this.Health = this.GameSession.Globals.BossCurrentHealth;
        }
        
        if (this.Health <= 0) this.Die();
    }
    
    function ChangeHealth(amount : Real)
    {
        if (this.Debug) Console.WriteLine("`this.Owner.Name`: `this.Health` + `amount` = `this.Health`");
        
        this.Health += amount;
        
        if (amount < 0)
        {
            // Damaged
            this.Owner.DispatchDown(Events.Damaged, ZilchEvent());
            this.Space.SoundSpace.PlayCue(SoundCue.Damage);
        }
        else if (amount > 0)
        {
            // Healed
            this.Owner.DispatchDown(Events.Healed, ZilchEvent());
            this.Space.SoundSpace.PlayCue(SoundCue.HealthPowerup);
        }
        
        if (this.HealthType == HealthType.Player)
        {
            this.GameSession.Globals.PlayerCurrentHealth = this.Health;
        }
        else if (this.HealthType == HealthType.Boss)
        {
            this.GameSession.Globals.BossCurrentHealth = this.Health;
        }
    }
    
    var Dead : Boolean;
    function Die()
    {
        if (this.Dead) return;
        this.Dead = true;
        
        if (this.HealthType == HealthType.Player)
        {
            // @missing Death effect and lose result
            this.Space.SoundSpace.PlayCue(SoundCue.PlayerDeath);
            this.GameSession.Globals.GameSpace.LoadLevel(Level.Hub);
        }
        else if (this.HealthType == HealthType.Boss)
        {
            // @missing Death effect and win result
            this.Space.SoundSpace.PlayCue(SoundCue.FoolDeath);
            if (this.GameSession.Globals.BossCurrentHealth <= 0)
            {
                Console.WriteLine("AHHHHH");
                this.GameSession.Globals.GameSpace.LoadLevel(Level.Hub);
            }
            
        }
        else
        {
            // @missing Death effect
            //this.Space.SoundSpace.PlayCue(SoundCue.FoolDeath); What does this else statment contorl??
            this.Owner.Destroy();
        }
    }
}

class HealthEffect : ZilchComponent
{
    var OriginalColor : Real4;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Owner, Events.Damaged, this.OnDamaged);
        Zero.Connect(this.Owner, Events.Healed, this.OnHealed);
        
        this.OriginalColor = this.Owner.Sprite.Color;
    }
    function OnDamaged(event : ZilchEvent)
    {
        var seq = Action.Sequence(this.Owner.Actions);
        Action.Property(seq, @this.Owner.Sprite.Color, Real4(1, 0.5, 0.5, 0.5), 0.05, Ease.Linear);
        Action.Delay(seq, 0.1);
        Action.Property(seq, @this.Owner.Sprite.Color, this.OriginalColor, 0.05, Ease.Linear);
    }
    function OnHealed(event : ZilchEvent)
    {
        var seq = Action.Sequence(this.Owner.Actions);
        Action.Property(seq, @this.Owner.Sprite.Color, Real4(0.5, 1, 0.5, 0.5), 0.05, Ease.Linear);
        Action.Delay(seq, 0.1);
        Action.Property(seq, @this.Owner.Sprite.Color, this.OriginalColor, 0.05, Ease.Linear);
    }
}
