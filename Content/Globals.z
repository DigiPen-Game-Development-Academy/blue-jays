// Author: Eli Miller
// Purpose: Easily accessible global variables that stay the same between levels.
enum CursorColor {RED, WHITE, BLUE}

class Globals : ZilchComponent
{
    var Particles : Boolean = true;
    
    var SavedStats : Cog;
    
    var KnightOfSwords : Turret = Turret(TurretType.KNIGHT, Archetype.KnightOfSwords,
        "Knight", SpriteSource.Knight_swords, 10);
    
    var TheTower : Turret = Turret(TurretType.STATIONARY, Archetype.TheTower,
        "Tower", SpriteSource.Towers, 20);
        
    var TheChariot : Turret = Turret(TurretType.UNIQUE, Archetype.TheChariot,
        "Chariot", SpriteSource.Chariot, 25);
    
    var SwordsList : Array[Turret] = new Array[Turret]();
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit);
        Zero.Connect(this.Space, Events.LevelStarted, this.OnLevelStart);
        this.SavedStats = Zero.ObjectStore.RestoreOrArchetype("Stats", Archetype.SavedStats, this.Space);
        this.SwordsList.Add(this.KnightOfSwords);
        this.SwordsList.Add(this.TheTower);
        this.SwordsList.Add(this.TheChariot);
    }
    
    function OnLevelStart(event : GameEvent)
    {
        if(event.LevelName == "Hub")
        {
            Zero.Mouse.Cursor = Cursor.Invisible;
            this.Space.CreateAtPosition(Archetype.Cursor, Real3(100));
        }
        this.SavedStats = Zero.ObjectStore.RestoreOrArchetype("Stats", Archetype.SavedStats, this.Space);
    }
    
    function ChangeCursor(color : CursorColor)
    {
        if(this.Space.CurrentLevel.Name != "Hub")
        {
            return;
        }
        var cursor = this.Space.FindObjectByName("Cursor");
        if(color == CursorColor.WHITE)
        {
            cursor.Sprite.Color = Real4(1,1,1,1);
        }
        else if(color == CursorColor.RED)
        {
            cursor.Sprite.Color = Real4(1,0,0,1);
        }
        else if(color == CursorColor.BLUE)
        {
            cursor.Sprite.Color = Real4(0,0,1,1);
        }
    }
    
    function StoreStats()
    {
        var au = "";
        foreach (var ach in this.Space.AchievementTracker.AllAchievements)
        {
            if(ach.Unlocked)
            {
                au = "`au`y";
            }
            else
            {
                au = "`au`n";
            }
        }
        this.SavedStats.SavedStats.AchUnlocks = au;
        Zero.ObjectStore.Store("Stats", this.SavedStats);
    }

    function OnGameRequestQuit(event : GameEvent)
    {
        event.Handled = true;
    }
    
    function GetTurrets() : Array[Turret]
    {
        return this.SwordsList;
    }
    
    function GetTarget(pos : Real3) : Cog
    {
        var l = this.Space.CurrentLevel.Name;
         if (l == "Rafters" || l == "FoolAfterLevel" || l == "LoversAfterLevel")
        {
            return this.Space.FindObjectByName("Pigeon");
        }
        
        if(l == "Fool" || l == "Death")
        {
            return this.Space.FindObjectByName("Boss");
        }
        else if(l == "Lovers")
        {
            return this.LevelSettings.LoversManager.GetLover(pos);
        }
        else
        {
            return null;
        }
       
    }
}
