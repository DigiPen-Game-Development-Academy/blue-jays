// Author: Eli Miller
// Purpose: Easily accessible global variables that stay the same between levels.
enum Suit {SWORDS, WANDS, COINS, CUPS}

class Globals : ZilchComponent
{
    var Particles : Boolean = true;
    
    var Suit : Suit = Suit.SWORDS;
    
    var SavedStats : Cog;
    
    var KnightOfSwords : Turret = Turret(TurretType.KNIGHT, Archetype.KnightOfSwords,
        "Knight of Swords", SpriteSource.Knight_swords, 10);
    
    var TheTower : Turret = Turret(TurretType.STATIONARY, Archetype.TheTower,
        "The Tower", SpriteSource.Towers, 20);
        
    var TheChariot : Turret = Turret(TurretType.UNIQUE, Archetype.TheChariot,
        "The Chariot", SpriteSource.Chariot, 25);
    
    var SwordsList : Array[Turret] = new Array[Turret]();
    
    var KnightOfWands : Turret = Turret(TurretType.KNIGHT, Archetype.KnightOfWands,
        "Knight of Wands", SpriteSource.Knight_swords, 10);
    
    var TheMagician : Turret = Turret(TurretType.STATIONARY, Archetype.TheMagician,
        "The Magician", SpriteSource.Towers, 20);
        
    var TheStar : Turret = Turret(TurretType.UNIQUE, Archetype.TheStar,
        "The Star", SpriteSource.Chariot, 25);
    
    var WandsList : Array[Turret] = new Array[Turret]();
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit);
        Zero.Connect(this.Space, Events.LevelStarted, this.OnLevelStart);
        this.SavedStats = Zero.ObjectStore.RestoreOrArchetype("Stats", Archetype.SavedStats, this.Space);
        Console.WriteLine(this.SavedStats);
        this.SwordsList.Add(this.KnightOfSwords);
        this.SwordsList.Add(this.TheTower);
        this.SwordsList.Add(this.TheChariot);
        
        this.WandsList.Add(this.KnightOfWands);
        this.WandsList.Add(this.TheMagician);
        this.WandsList.Add(this.TheStar);
    }
    
    function OnLevelStart(event : GameEvent)
    {
        this.SavedStats = Zero.ObjectStore.RestoreOrArchetype("Stats", Archetype.SavedStats, this.Space);
    }
    
    function StoreStats()
    {
        var au = "";
        foreach (var ach in this.Space.AchievementTracker.AllAchievements)
        {
            if(ach.Unlocked)
            {
                au = "`au`y";
            }
            else
            {
                au = "`au`n";
            }
        }
        this.SavedStats.SavedStats.AchUnlocks = au;
        Zero.ObjectStore.Store("Stats", this.SavedStats);
    }

    function OnGameRequestQuit(event : GameEvent)
    {
        event.Handled = true;
    }
    
    function GetTurrets() : Array[Turret]
    {
        if(this.Suit == Suit.SWORDS)
        {
            return this.SwordsList;
        }
        else if(this.Suit == Suit.WANDS)
        {
            return this.WandsList;
        }
        else if(this.Suit == Suit.COINS)
        {
            return this.SwordsList;
        }
        else if(this.Suit == Suit.CUPS)
        {
            return this.SwordsList;
        }
        else
        {
            return Array[Turret]();
        }
    }
}
